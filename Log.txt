Log Driver :

package mrLogFile_demo;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;



public class UserLogDriver {
	private static JobClient my_client;
public static void main(String[] args) {
 my_client = new JobClient();

JobConf job_conf = new JobConf(UserLogDriver.class);

job_conf.setJobName("MaxLoggedUsers");


job_conf.setOutputKeyClass(Text.class);
job_conf.setOutputValueClass(IntWritable.class);


job_conf.setMapperClass(UserLogMapper.class);

job_conf.setReducerClass(UserLogReducer .class);

job_conf.setInputFormat(TextInputFormat.class);
job_conf.setOutputFormat(TextOutputFormat.class);

FileInputFormat.setInputPaths(job_conf, new Path(args[0]));
FileOutputFormat.setOutputPath(job_conf, new Path(args[1]));
my_client.setConf(job_conf);
try {

JobClient.runJob(job_conf);
} catch (Exception e) {
e.printStackTrace();
}
}
}

UserLog Reducer:

package mrLogFile_demo;


import java.io.IOException;
import java.util.*;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.*;
public class UserLogReducer extends MapReduceBase implements Reducer<Text,
IntWritable, Text, IntWritable> {
public void reduce(Text t_key, Iterator<IntWritable> values,
OutputCollector<Text,IntWritable> output, Reporter reporter) throws IOException
{
Text key = t_key;
int frequencyForUser = 0;
while (values.hasNext()) {
// replace type of value with the actual type of our value
IntWritable value = (IntWritable) values.next();
frequencyForUser += value.get();
}
output.collect(key, new IntWritable(frequencyForUser));
}
}


UserLogMapper:

package mrLogFile_demo;

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.*;
public class UserLogMapper extends MapReduceBase implements Mapper<LongWritable,
Text, Text, IntWritable> {
private final static IntWritable one = new IntWritable(1);
public void map(LongWritable key, Text value, OutputCollector<Text,
IntWritable> output, Reporter reporter) throws IOException {
String valueString = value.toString();
String[] SingleUserData = valueString.split("-");
output.collect(new Text(SingleUserData[0]), one);
}
}


